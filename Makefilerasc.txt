all:
	gcc so_long.c so_long_utils.c    -o so_long
	@echo -e "\n"
	./so_long map/map1.txt | cat -e
	@echo -e "\n"

al:
	gcc r.c -o r
	./r

a:
	gcc so_long.c so_long.h so_long_utils.c ./Libft/libft.a -L./minilibx-linux -lmlx -lXext -lX11 -lm -o so_long                                                      
        
m:
	gcc main.c ./Libft/libft.a -L./minilibx-linux -lmlx -lXext -lX11 -lm -o so_long
	./so_long map1.bar
	./so_long map2.bar

mm:
	gcc main.c ./Libft/libft.a -L./minilibx-linux -lmlx -lXext -lX11 -lm -o so_long
	./so_long map1.bar
	./so_long map2.bar

n:
	norminette ./*.c ./*.h

pull:
	@git pull
	make -C libft/
	all
	make fclean -C libft/

push:
	git add .; git commit -m "caso resolvido" ;git push

to_fill:
	gcc flood_fill.c -o flood_fill && ./flood_fill

so_long:
	gcc so_long.c ./libft/libft.a -L./minilibx_linux -l mlx -lXext -lX11 -lm -o so_long

$(OBJS): %.o: %.c
	@gcc $(FLAGS) -c $< -o $@

$(BOBJS): %.o: %.c
	@gcc $(FLAGS) -c $< -o $@

$(NAME): $(OBJS)
	@ar rc $(NAME) $(OBJS)
	@make clean

bonus: $(OBJS) $(BOBJS)
	@ar rc $(NAME) $(OBJS) $(BOBJS)
	@make clean



	// mlx_destroy_image(window->mlx, window->bg);
	// mlx_destroy_window(window->mlx, window->win);
	// mlx_destroy_display(window->mlx);
	// free(window->mlx);
    // exit(0);

t_point	*find_in_all_matrix(char **matrix, char ch)
{
	int		l;
	int		c;
	int		i;
	int		len;
	t_point	*list_point;

	l = 0;
	i = 0;
	len = count_occurrence(matrix, ch);
	list_point = (t_point *)ft_calloc(len + 1, sizeof(t_point));
	if (!list_point)
		return (NULL);
	while (matrix[l])
	{
		c = 0;
		while (matrix[l][c])
		{
			if (matrix[l][c] == ch)
			{
				list_point[i] = (t_point){c, l};
				i++;
			}
			c++;
		}
		l++;
	}
	list_point[i] = (t_point){-1, -1};
	return (list_point);
}












///////////////////////////////
t_point	*find_in_all_matrix(char **matrix, char ch)
{
	int		l;
	int		i;
	int		len;
	t_point	*list_point;

	l = 0;
	i = 0;
	len = count_occurrence(matrix, ch);
	list_point = (t_point *)ft_calloc(len + 1, sizeof(t_point));
	if (!list_point)
		return (NULL);
	while (matrix[l])
	{
		c = 0;
		list_point = loop_find_all(matrix[l], &list_point, &i);
		l++;
	}
	list_point[i] = (t_point){-1, -1};
	return (list_point);
}

t_point	*loop_find_all(char *line_matrix, t_point **list_point, int *i)
{
	int		c;
	t_point	*list;

	c = 0;
	list = *list_point;
	while (line_matrix[l][c])
	{
		if (line_matrix[l][c] == ch)
		{
			list_point[*i] = (t_point){c, l};
			*i++;
		}
		c++;
	}
	return (list);
}